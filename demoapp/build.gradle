apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.monits.staticCodeAnalysis'
apply plugin: 'com.getkeepsafe.dexcount'
apply from: rootProject.file('jacoco.gradle')
apply from: rootProject.file('detekt.gradle')

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.getkeepsafe.dexcount:dexcount-gradle-plugin:$dexCountGradlePlugin"
    }
}

android {
    compileSdkVersion maxApiLevel.toInteger()
    buildToolsVersion androidBuildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "$libraryGroupId" + ".demoapp"
        minSdkVersion minApiLevel
        targetSdkVersion maxApiLevel
        versionCode "$demoAppVersionCode".toInteger()
        versionName "$libraryVersion"

        multiDexEnabled true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            aaptOptions {
                cruncherEnabled false
            }

            resValue("string", "andesui_demoapp_app_name", "Andes DEBUG v${libraryVersion}")
        }
        release {
            initWith(buildTypes.debug)

            // We need this in true to test after executing ProGuard to check our ProGuard custom rules.
            minifyEnabled true
            shrinkResources true

            applicationIdSuffix ''
            resValue("string", "andesui_demoapp_app_name", "Andes v${libraryVersion}")
        }
        mds {
            initWith(buildTypes.debug)

            // We need this in true to test after executing ProGuard to check our ProGuard custom rules.
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (project.hasProperty('mdsAppIdSuffix')) {
                applicationIdSuffix "${project.mdsAppIdSuffix}"
            }
            if (project.hasProperty('mdsVersionNameSuffix')) {
                versionNameSuffix "${project.mdsVersionNameSuffix}"
            }
            resValue("string", "andesui_demoapp_app_name", "Andes v${libraryVersion}")
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
    }

    dexOptions.preDexLibraries = true
}

staticCodeAnalysis {
    // False is REQUIRED in order to make CI server fail the build on errors.
    ignoreErrors = false

    androidLintConfig = "$project.rootProject.projectDir/config/android/android-lint-demoapp.xml"
}
configurations.all {
    resolutionStrategy {
        force "androidx.appcompat:appcompat:$appCompatVersion"
    }
}

dependencies {
    implementation project(':components')
    implementation project(':coachmark')

    implementation prod.kotlinStdlib
    implementation prod.supportConstraintLayout
    implementation prod.supportLibraryAppCompatV7
    implementation prod.fresco

    implementation showcase.glide
    implementation showcase.markwon
    debugImplementation showcase.leakCanary
}

/**
 * Based on https://stackoverflow.com/a/44218054/2823516
 */
copy {
    from file ('../CHANGELOG.md')
    into 'src/main/res/raw'
    rename { String fileName ->
        fileName.replace("CHANGELOG.md", "andesui_demoapp_changelog.md")
    }
}
